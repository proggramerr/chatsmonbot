import json
import os
import sqlite3
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import logging
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from resender_bot import TelegramSender
from telethon.errors.rpcerrorlist import SessionPasswordNeededError, InviteHashExpiredError, FloodWaitError

logging.basicConfig(level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('messages.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS accounts
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  api_id TEXT,
                  api_hash TEXT,
                  session_filename TEXT,
                  proxy TEXT,
                  proxy_port TEXT,
                  proxy_login TEXT,
                  proxy_password TEXT,
                  app_version TEXT,
                  device TEXT,
                  chat_id TEXT,
                  count_chats INT,
                  active BOOLEAN,
                  keyword TEXT,
                  name TEXT)''')
conn.commit()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS chats (
        session_filename TEXT,
        chat_url TEXT
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS last_messages (
        last_message_id INT,
        dialog_id INT
    )
''')

conn.commit()

bot = Bot(token='6131466282:AAFvKWjYGAybbGcyiwML29uEBYDQG8Hsi90')
dp = Dispatcher(bot, storage=MemoryStorage())

class Files(StatesGroup):
    json_file = State()
    session_file = State()

class Subscribe(StatesGroup):
    message = State()
    session_file = State()
    chat_url = State()

class Chat(StatesGroup):
    session_file = State()
    chat_id = State()

class Keyword(StatesGroup):
    keyword = State()
    session_file = State()

class Name(StatesGroup):
    name = State()
    session_file = State()

telegram_senders = {}

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    print(telegram_senders)
    query  = """
            SELECT * FROM accounts
            """
    cursor.execute(query)
    results = cursor.fetchall()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    if results:
        for result in results:
            if not result[14]:
                keyboard.add(types.InlineKeyboardButton(result[3].split('.')[0], callback_data=f'account_{result[3]}'))
            else:
                keyboard.add(types.InlineKeyboardButton(f"{result[3].split('.')[0]} - {result[14]}", callback_data=f'account_{result[3]}'))
    keyboard.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="add"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('end'), state='*')
async def return_to_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    query  = """
            SELECT * FROM accounts
            """
    cursor.execute(query)
    results = cursor.fetchall()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    if results:
        for result in results:
            keyboard.add(types.InlineKeyboardButton(result[3].split('.')[0], callback_data=f'account_{result[3]}'))
    
    keyboard.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="add"))
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:", reply_markup=keyboard)



@dp.callback_query_handler(lambda c: c.data.startswith('account'))
async def info_account(callback_query: types.CallbackQuery):
    data = callback_query.data.split('_')
    session_filename = data[1]
    result = get_current_session(session_filename)
    session_name = session_filename.split('.')[0]
    print(session_name)
    
    if result[11] != None:
        dialogs = result[11]
    else:
        dialogs = '‚õîÔ∏è'

    if result[10] != None:
        chat_to_resend = result[10]
    else:
        chat_to_resend = '‚õîÔ∏è'
    if result[13] != None:
        keywords = result[13]
    else:
        keywords = '*'
    if result[14] != None:
        name = result[14]
    else:
        name = ''

    print(chat_to_resend)

    text = f'üë§*–ê–∫–∫–∞—É–Ω—Ç ‚Ññ*`{session_name} {name}`\n\nüí¨*–ö–æ–ª-–≤–æ —á–∞—Ç–æ–≤*: `{dialogs}`\n‚Ü™Ô∏è*–ß–∞—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏*: `{chat_to_resend}`\n*üóù–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:* `{keywords}`\n\n‚ö†Ô∏è*–í–Ω–∏–º–∞–Ω–∏–µ*\n_–£–±–µ–¥–∏—Ç–µ—Å—å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º, —á—Ç–æ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ —á–∞—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π_'
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    subscribe_button = types.InlineKeyboardButton('‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', callback_data=f'subscribe_{result[3]}')
    enter_resend_dialog_button = types.InlineKeyboardButton('üíå –ß–∞—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏', callback_data=f'resend-chat_{result[3]}')
    add_keyword_button = types.InlineKeyboardButton('üóù –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', callback_data=f'keyword_{result[3]}')
    edit_name = types.InlineKeyboardButton('üó£ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data=f'name_{result[3]}')
    start_resend_button = types.InlineKeyboardButton('‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É', callback_data=f'start_{result[3]}')
    end_resend_button = types.InlineKeyboardButton('‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É', callback_data=f'stop_{result[3]}')
    delete_button = types.InlineKeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data=f'delete_{result[3]}')
    back_to_menu = types.InlineKeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data=f'end')
    keyboard.add(subscribe_button, enter_resend_dialog_button, add_keyword_button, edit_name)
    if session_filename in telegram_senders:
        keyboard.add(end_resend_button)
    else:
        keyboard.add(start_resend_button)
    keyboard.add(delete_button, back_to_menu)
    await callback_query.message.answer(text=text, parse_mode='Markdown', reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('delete'))
async def start_bot(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data.split('_')
    query = """
                DELETE FROM accounts WHERE session_filename = ?
                """
    data_query = (data[1],)
    cursor.execute(query, data_query)
    conn.commit()
    await bot.edit_message_text(text='‚úÖ–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.', chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

@dp.callback_query_handler(lambda c: c.data.startswith('name'))
async def enter_keyword(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data.split('_')
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    back_to_menu = types.InlineKeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data=f'end')
    keyboard.add(back_to_menu)
    await callback_query.message.answer('*–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–µ—Å—Å–∏–∏*', parse_mode='Markdown', reply_markup=keyboard)
    await state.update_data(session_file=data[1])
    await Name.name.set()

@dp.message_handler(state=Name.name)
async def edit_keyword(message: types.Message, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    back_to_menu = types.InlineKeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data=f'end')
    keyboard.add(back_to_menu)
    keyword = message.text
    query = """
            UPDATE accounts
            SET name = ?
            WHERE session_filename = ?
            """
    data = await state.get_data()
    session_filename = data['session_file']
    cursor.execute(query, (keyword, session_filename))
    conn.commit()
    await message.answer('‚úÖ–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith('keyword'))
async def enter_keyword(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data.split('_')
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    back_to_menu = types.InlineKeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data=f'end')
    keyboard.add(back_to_menu)
    await callback_query.message.answer('üóù*–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –º–∞—à–∏–Ω–∞,—Å—Ç–æ–ª*', parse_mode='Markdown', reply_markup=keyboard)
    await state.update_data(session_file=data[1])
    await Keyword.keyword.set()

@dp.message_handler(state=Keyword.keyword)
async def edit_keyword(message: types.Message, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    back_to_menu = types.InlineKeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data=f'end')
    keyboard.add(back_to_menu)
    keyword = message.text
    query = """
            UPDATE accounts
            SET keyword = ?
            WHERE session_filename = ?
            """
    data = await state.get_data()
    session_filename = data['session_file']
    cursor.execute(query, (keyword, session_filename))
    conn.commit()
    await message.answer('‚úÖ–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.')
    await state.finish()


@dp.callback_query_handler(lambda c: c.data.startswith('start'))
async def start_bot(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data.split('_')
    result = get_current_session(data[1])
    try:
        telethon = TelegramSender(result[1], result[2], f'sessions/{result[3]}', result[4], result[5], result[6], result[7], result[8], result[9], result[10])
        await telethon.start()
        await telethon.check_chat()
        await callback_query.message.answer('‚úÖ–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω\n–ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.')
        telegram_senders[data[1]] = telethon
        await telethon.new_message_handler()
    except SessionPasswordNeededError:
        await callback_query.message.answer('‚õîÔ∏è–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω. –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞.')
        await telethon.stop()
    except (ValueError, InviteHashExpiredError):
        await callback_query.message.answer('‚õîÔ∏è–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏.')
        await telethon.stop()
    except FloodWaitError as e:
        await callback_query.message.answer(f'‚õîÔ∏è–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω. –§–ª—É–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. \n\n`{e}`', parse_mode='Markdown')
        await telethon.stop()

@dp.callback_query_handler(lambda c: c.data.startswith('stop'))
async def start_bot(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data.split('_')
    await telegram_senders[data[1]].stop()
    del telegram_senders[data[1]]
    await callback_query.message.answer('‚úÖ–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n–ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.')

@dp.callback_query_handler(lambda c: c.data.startswith('resend-chat'))
async def choice_resend_chat(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    back_to_menu = types.InlineKeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data=f'end')
    keyboard.add(back_to_menu)
    data = callback_query.data.split('_')
    print(data)
    if data[1] in telegram_senders:
        await telegram_senders[data[1]].stop()
        del telegram_senders[data[1]]
    await state.update_data(session_file=data[1])
    await callback_query.message.answer('üîó*–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∞ https://t.me/+gzm8AZJSwqViYThi*', parse_mode='Markdown', reply_markup=keyboard)
    await Chat.chat_id.set()


@dp.message_handler(state=Chat.chat_id)
async def edit_chat_id(message: types.Message, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    back_to_menu = types.InlineKeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data=f'end')
    keyboard.add(back_to_menu)
    chat_id = message.text
    query = """
            UPDATE accounts
            SET chat_id = ?
            WHERE session_filename = ?
            """
    data = await state.get_data()
    session_filename = data['session_file']
    print(session_filename)
    cursor.execute(query, (chat_id, session_filename))
    conn.commit()
    await message.answer('‚úÖ–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω', reply_markup=keyboard)
    await state.finish()


def get_current_session(session_filename):
    query = """
            SELECT * FROM accounts WHERE session_filename = ?
            """
    data = (session_filename,)
    cursor.execute(query, data)
    conn.commit()
    results = cursor.fetchall()
    result = results[0]
    return result

@dp.callback_query_handler(lambda c: c.data.startswith('subscribe'))
async def subscribe_account(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    back_to_menu = types.InlineKeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data=f'end')
    keyboard.add(back_to_menu)
    data = callback_query.data.split('_')
    if data[1] in telegram_senders:
        await telegram_senders[data[1]].stop()
        del telegram_senders[data[1]]
    message = await callback_query.message.answer('üîó*–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç*\n_–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ–ª–µ–µ —á–µ–º 1 —á–∞—Ç, —É–∫–∞–∂–∏—Ç–µ –≤—Å–µ –Ω—É–∂–Ω—ã–µ —á–∞—Ç—ã —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏_.\n\n‚õîÔ∏è*–í–Ω–∏–º–∞–Ω–∏–µ*\n_–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—Ç–µ—Å—è –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –±–æ–ª–µ–µ —á–µ–º_ `20` _—á–∞—Ç–æ–≤ –≤ –¥–µ–Ω—å._\n\nüïê_–ü–µ—Ä–µ–¥ –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞..._', parse_mode='Markdown', reply_markup=keyboard)
    await state.update_data(session_file=data[1])
    await state.update_data(message=message)
    await Subscribe.chat_url.set()

@dp.message_handler(state=Subscribe.chat_url)
async def subscribe_to_chat(message: types.Message, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    back_to_menu = types.InlineKeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data=f'end')
    keyboard.add(back_to_menu)
    urls = message.text
    urls_list = urls.split('\n')
    data = await state.get_data()
    result = get_current_session(data['session_file'])
    for url in urls_list:
        cursor.execute('INSERT INTO chats (session_filename, chat_url) VALUES (?, ?)', (result[3], url))
        conn.commit()
    try:
        await message.answer(f'‚úÖ*–ù–∞—à–µ–ª {len(urls_list)} —á–∞—Ç–æ–≤*. `–í–∞—à–∏ —á–∞—Ç—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.`', parse_mode='Markdown', reply_markup=keyboard)
    except Exception as e:
       await message.answer(f'‚õîÔ∏è*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é*', parse_mode='Markdown')
    finally:
        await state.finish()
    


@dp.callback_query_handler(lambda c: c.data.startswith('add'))
async def add_account(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    back_to_menu = types.InlineKeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data=f'end')
    keyboard.add(back_to_menu)
    await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .session –∏ .json –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", reply_markup=keyboard)
    await Files.json_file.set()


@dp.message_handler(state=Files.json_file, content_types=types.ContentType.DOCUMENT)
async def download_files_handler(message: types.Message, state: FSMContext):
    document = message.document
    file_name = document.file_name
    file_id = document.file_id
    file_path = f'sessions/{file_name}'
    await message.answer(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file_name}")
    await bot.download_file_by_id(file_id, file_path)
    if file_name.split('.')[1] == 'json':
        with open(file_path) as file:
            json_data = json.loads(file.read())
            try:
                await update_session_data(json_data,)
                await message.answer('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
            except Exception as e:
                print(e)
                await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö')
    await state.finish()

async def update_session_data(json_data):
    query  = """
            SELECT * FROM accounts WHERE session_filename = ?
            """
    session_filename = f"{json_data['session_file']}.session"
    cursor.execute(query, (session_filename, ))
    results = cursor.fetchall()
    if results:
        query = """
                DELETE FROM accounts WHERE session_filename = ?
                """
        data = (session_filename,)
        cursor.execute(query, data)
        conn.commit()
    api_id = json_data['app_id']
    api_hash = json_data['app_hash']
    proxy = json_data['proxy'][1]
    proxy_port = json_data['proxy'][2]
    proxy_login = json_data['proxy'][4]
    proxy_password = json_data['proxy'][5]
    app_version = json_data['app_version']
    device = json_data['device']
    query = """
        INSERT INTO accounts (api_id, api_hash, session_filename, proxy, proxy_port, proxy_login, proxy_password, app_version, device)
        SELECT ?, ?, ?, ?, ?, ?, ?, ?, ?
        WHERE NOT EXISTS (SELECT 1 FROM accounts WHERE session_filename = ?)
    """
    data = (api_id, api_hash, session_filename, proxy, proxy_port, proxy_login, proxy_password, app_version, device, session_filename)
    cursor.execute(query, data)
    conn.commit()
    
    


def main():
    executor.start_polling(dp, skip_updates=True)


if __name__ == '__main__':
    main()